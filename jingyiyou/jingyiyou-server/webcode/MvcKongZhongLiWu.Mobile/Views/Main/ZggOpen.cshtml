@{
    ViewBag.Title = "打开箱门";

}
<script type="text/javascript" src="~/Scripts/jquery-1.8.2.min.js"></script>
<script type="text/javascript" src="~/Scripts/base64.js"></script>
<script type="text/javascript" src="~/Scripts/jweixin-1.0.0.js"></script>
<script type="text/javascript">
    var deveiceNo = "@ViewBag.deveiceNo";
    wx.config({
        beta: true, // 开启内测接口调用，注入wx.invoke方法,非常重要!!必须有这个
        debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
        appId: '@ViewBag.js_json.appId', // 必填，公众号的唯一标识
        timestamp: '@ViewBag.js_json.timeStamp', // 必填，生成签名的时间戳
        nonceStr: '@ViewBag.js_json.nonceStr', // 必填，生成签名的随机串
        signature: '@ViewBag.js_json.paySign',// 必填，签名，见附录1
        jsApiList: [                //需要调用的接口，都得在这里面写一遍
        "openWXDeviceLib",//初始化设备库（只支持蓝牙设备）
        "closeWXDeviceLib",//关闭设备库（只支持蓝牙设备）
        "getWXDeviceInfos",//获取设备信息（获取当前用户已绑定的蓝牙设备列表）
        "sendDataToWXDevice",//发送数据给设备
        "startScanWXDevice",//扫描设备（获取周围所有的设备列表，无论绑定还是未被绑定的设备都会扫描到）
        "stopScanWXDevice",//停止扫描设备
        "connectWXDevice",//连接设备
        "disconnectWXDevice",//断开设备连接
        "getWXDeviceTicket",//获取操作凭证

        //下面是监听事件：
        "onWXDeviceBindStateChange",//微信客户端设备绑定状态被改变时触发此事件
        "onWXDeviceStateChange",//监听连接状态，可以监听连接中、连接上、连接断开
        "onReceiveDataFromWXDevice",//接收到来自设备的数据时触发
        "onScanWXDeviceResult",//扫描到某个设备时触发
        "onWXDeviceBluetoothStateChange",//手机蓝牙打开或关闭时触发
        "scanQRCode",
        ]
    });
    wx.ready(function () {
        $.ajax({
            url: "/main/check", success: function (res) {
                if (res=="ok") {
                    // 初始化设备库函数
                    bus.open('@ViewBag.gzhid');
                    //alert(deveiceNo);
                    bus.init();
                    bus.conn();
                    //bus.xintiaoexe();
                    //bus.doopendoor();
                } else {
                    window.location = '/main/noright';
                }
               
            }
        });
        

    });
   
    var bus = new function () {
    
        this.open = function (brandUserName) {
            wx.invoke('openWXDeviceLib', { 'brandUserName': brandUserName },
            function (res) {
                //mlog("打开设备返回："+res.err_msg);
                //alert(res.bluetoothState);
                if (res.err_msg == 'openWXDeviceLib:ok') {
                    if (res.bluetoothState == 'off') {
                        //showdialog("太着急啦","亲,使用前请先打开手机蓝牙！");
                        $(".bluestate").html("开箱门需要用到蓝牙，请打开手机蓝牙");
                        $(".bluestate").css({ color: "red" });
                       
                    };
                    if (res.bluetoothState == 'unauthorized') {
                        //showdialog("出错啦","亲,请授权微信蓝牙功能并打开蓝牙！");
                        $(".bluestate").html("请授权蓝牙功能");
                        $(".bluestate").css({ color: "red" });
                        
                    };
                    if (res.bluetoothState == 'on') {
                        //showdialog("太着急啦","亲,请查看您的设备是否打开！");
                        $(".bluestate").html("蓝牙已打开");
                        $(".bluestate").css({ color: "green" });
                        //bus.conn();                        
                        //bus.conn();
                    };
                }
                else {
                    $(".bluestate").html("微信蓝牙打开失败");
                  
                    //showdialog("微信蓝牙状态","亲,请授权微信蓝牙功能并打开蓝牙！");
                }
            });
        };
        this.sendMsg = function (msg) {
            var data = { "deviceId": deveiceNo, "base64Data": base64encode(msg) };
            wx.invoke('sendDataToWXDevice', data, function (res) {
                bus.debuggershow(res.err_msg);
            });

        };

        this.init = function () {
            //设备连接状态改变
            wx.on('onWXDeviceStateChange', function (res) {
                //有3个状态：connecting连接中,connected已连接,unconnected未连接
                //每当手机和设备之间的状态改变的瞬间，会触发一次

                //$(".bluestate").html(res.deviceId + "===" + res.state);
                if (res.state == "disconnected") {
                    $(".bluestate").html("蓝牙已断开");
                    $(".bluestate").css({ color: "red" });
                    bus.conn();
                };
                if (res.state == "connected") {
                    $(".bluestate").html("蓝牙已连接");
                    $(".bluestate").css({ color: "green" });
                    bus.opendoor();
                };
                if (res.state == "unconnected") {
                    $(".bluestate").html("蓝牙未连接");
                    $(".bluestate").css({ color: "red" });
                    bus.conn();
                };
                if (res.state == "connecting") {
                    $(".bluestate").html("蓝牙连接中..");
                    $(".bluestate").css({ color: "black" });
                    //bus.conn();
                }
            });
            wx.on('onReceiveDataFromWXDevice', function (res) {                
                var msg = base64decode(res.base64Data);
                msg = msg.trim();
               // $('.openstate').html(msg.trim().length);    
                if (msg == "ok") {
                    $('.openstate').html("箱门已经打开");
                    window.location = "/main/zggopened";
                    //bus.opendoorclear();
                }
                // $("#pmsg").html(base64decode(res.base64Data));

            });
          

        };
        this.conn = function () {
            $(".constate").html("正在连接中...");
            $(".constate").css({ color: "black" });
            wx.invoke('connectWXDevice', { "deviceId": deveiceNo }, function (res) {
                //alert(res.err_msg);
                //回调
                //$('.btn-red').val("自动开门中");
                bus.opendoor();
                
            });
        };
       
        this.refulsh = function () {            
            window.location.reload();
        };
        //this.autorefulsh = function () {
        //    setInterval(bus.refulsh, 20000);
        //};
        //this.refulshclear = function () {
        //    clearInterval(bus.refulsh);
        //};
      
        this.opendoor = function () {
            
            bus.doopendoor();
            setInterval(bus.doopendoor, 2000);
          
        };
        this.doopendoor = function () {
            $('.openstate').html("正在发送开门命令，请稍后..");            
            bus.sendMsg("command=#open2close*");
          
        };
        this.opendoorclear = function () {
            alert(isdooropened + isopening);
            $('.openstate').html("箱门已经打开");
            isdooropened = true;
            clearInterval(bus.doopendoor);
        };
        this.xintiaoexe = function () {
            setInterval(bus.sendcheck, 2000);
        };
        this.xintiaoclear = function () {
            clearInterval(bus.sendcheck);
        };
        this.sendcheck = function () {
            $(".msgshow").html("+check");
            bus.sendMsg("+check");
        };
        this.debuggershow = function (msg) {
            $('.msgshow').html(msg);
        };
    }
    function reflush() {

        bus.refulsh();
    }
</script>
<style type="text/css">
    .my-info{
        width:100% !important;
        
    }
    .info-show{
        color:orangered;
        margin-top:3em;
    }
    .msgshow{
        display:none;
    }
</style>

<section class="ect-margin-tb ect-margin-bottom0 ect-padding-lr checkout-select checkout-pro-list">
    
        <p><b>正在自动打开箱门...</b></p>

        <ul>
            <li>
                <dl>
                    <dt class="pull-left bluestate my-info" >

                    </dt>
                    <dt class="pull-left openstate my-info" >

                    </dt>
                    <dt class="pull-left constate my-info">

                    </dt>
                    <dt class="pull-left msgshow my-info" >

                    </dt>
                    <dt class="pull-left info-show my-info">
                        若长时间无反应，请点击最下方的“重新连接”按钮
                    </dt>
                </dl>
            </li>
        </ul>
</section>


<div class="btnpanel">
    <input type="button" name="submit" value="重新连接" onclick="reflush();" class="btn btn-info ect-colorf button_only btn-red">
</div>